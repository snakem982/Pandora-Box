name: Build MacOS App

on:
  push:
    branches:
      - v3
    tags:
      - 'v*'

jobs:
  build:
    permissions: write-all
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ amd64,arm64 ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install Frontend Dependencies
        run: |
          npm install

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Backend Dependencies
        shell: pwsh
        run: |
          cd src-go
          go mod tidy

      - name: Build Backend for ${{ matrix.arch }}
        shell: pwsh
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          cd src-go
          go build -tags=with_gvisor -trimpath -ldflags "-s -w" -o px

      - name: Build Frontend for ${{ matrix.arch }}
        shell: pwsh
        run: |
          # 将传入的 matrix.arch 保存到变量中
          $arch = "${{ matrix.arch }}"
          # 如果是 amd64，则转换为 x64，Electron Forge 才能识别
          if ($arch -eq "amd64") {
            $arch = "x64"
          }
          # 输出转换结果供调试用（可选）
          Write-Host "Using arch: $arch"
          npm run make -- --arch=$arch

      - name: Compress Executable
        shell: pwsh
        run: |
          Compress-Archive -Path out\make\* -DestinationPath "macos-${{ matrix.arch }}-dmg.zip"
          Compress-Archive -Path out\Pandora-Box*\* -DestinationPath "macos-${{ matrix.arch }}-app.zip"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1-alpha
          name: v1.0.1-alpha
          draft: false
          prerelease: true
          files: |
            macos-${{ matrix.arch }}-dmg.zip
            macos-${{ matrix.arch }}-app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}