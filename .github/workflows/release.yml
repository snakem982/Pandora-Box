name: Release App

on:
  workflow_run:
    workflows:
      - Build Windows App
      - Build Linux App
      - Build MacOS App
    types:
      - completed

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Version
        id: set_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          if [[ "$VERSION" == *"-alpha" ]]; then
            echo "prerelease=true" >> $GITHUB_ENV
          else
            echo "prerelease=false" >> $GITHUB_ENV
          fi

      - name: Get Previous Release Tag (latest official release)
        id: get_latest_release
        shell: bash
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "PREV_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Generate Sorted & Deduplicated Changelog
        shell: bash
        run: |
          echo "Generating changelog between $PREV_TAG and $VERSION"

          # 定义类型优先级
          declare -A type_order=(
            [feat]=1
            [fix]=2
            [perf]=3
            [improvement]=4
            [refactor]=5
            [style]=6
            [chore]=7
            [docs]=8
            [revert]=9
            [test]=10
            [build]=11
            [ci]=12
          )

          # 获取提交，时间倒序（tac是linux命令，Ubuntu有）
          git log "$PREV_TAG..$VERSION" --pretty=format:"%H %s" --date-order | tac > all_commits.txt

          # 按提交标题去重，只保留最新（利用awk）
          awk '!seen[substr($0, index($0,$2))]++' all_commits.txt > unique_commits.txt

          # 加权并排序
          while IFS= read -r line; do
            commit_hash=$(echo "$line" | cut -d' ' -f1)
            message=$(echo "$line" | cut -d' ' -f2-)
            type=$(echo "$message" | cut -d':' -f1)
            weight=${type_order[$type]:-999}
            echo "$weight|$commit_hash|$message"
          done < unique_commits.txt | sort -t"|" -k1,1n > sorted_commits.txt

          # 生成 changelog 内容
          > changelog.txt
          while IFS='|' read -r weight commit_hash message; do
            git show -s --format="- %s (%an)" "$commit_hash" >> changelog.txt
          done < sorted_commits.txt

          cat changelog.txt

          echo "release_notes<<EOF" >> $GITHUB_ENV
          cat changelog.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 下载所有平台架构的构建产物
      - name: Download Windows amd64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-amd64
          path: artifacts/windows-amd64

      - name: Download Windows arm64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-arm64
          path: artifacts/windows-arm64

      - name: Download MacOS amd64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-amd64
          path: artifacts/macos-amd64

      - name: Download MacOS arm64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: artifacts/macos-arm64

      - name: Download Linux amd64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-amd64
          path: artifacts/linux-amd64

      - name: Download Linux arm64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64
          path: artifacts/linux-arm64

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: ${{ env.release_notes }}
          prerelease: ${{ env.prerelease }}
          files: |
            artifacts/windows-amd64/windows-amd64-app.zip
            artifacts/windows-amd64/windows-amd64-msi.zip
            artifacts/windows-arm64/windows-arm64-app.zip
            artifacts/windows-arm64/windows-arm64-msi.zip
            artifacts/macos-amd64/macos-amd64-dmg.zip
            artifacts/macos-arm64/macos-arm64-dmg.zip
            artifacts/linux-amd64/linux-amd64-deb.zip
            artifacts/linux-amd64/linux-amd64-rpm.zip
            artifacts/linux-arm64/linux-arm64-deb.zip
            artifacts/linux-arm64/linux-arm64-rpm.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
