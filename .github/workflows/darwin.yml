name: Build macOS App

on:
  push:
    branches:
      - v3-alpha
    tags:
      - 'v*'

jobs:
  build:
    permissions: write-all
    runs-on: macos-latest

    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set version dynamically
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "alpha-$(date +%Y%m%d-%H%M)")
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"


      - name: Build macOS package
        run: |
          echo "Building Pandora-Box version $VERSION"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./backend/go.mod
      - run: go version

      - name: Build Go Backend for ${{ matrix.arch }}
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.15
          cd backend
          go mod tidy
          CGO_ENABLED=1 GOARCH=${{ matrix.arch }} GOOS=darwin \
            go build -tags=with_gvisor -trimpath \
            -ldflags "-s -w -extldflags=-mmacosx-version-min=10.15" \
            -o Pandora-Box-${{ matrix.arch }} main.go

      - name: Create macOS App Bundle
        run: |
          APP_NAME=Pandora-Box
          APP_DIR="${APP_NAME}.app"
          
          mkdir -p "$APP_DIR/Contents/MacOS"
          mkdir -p "$APP_DIR/Contents/Resources"
          
          # 移动构建的二进制到 App Bundle 中
          mv backend/${APP_NAME}-${{ matrix.arch }} "$APP_DIR/Contents/MacOS/${APP_NAME}"
          
          # 写入 Info.plist
          cat > "$APP_DIR/Contents/Info.plist" <<EOF
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>CFBundleExecutable</key>
              <string>${APP_NAME}</string>
              <key>CFBundleIconFile</key>
              <string>appicon.icns</string>
              <key>CFBundleIdentifier</key>
              <string>us.snakem982.px</string>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundleVersion</key>
              <string>v1.0.1-alpha</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>NSHumanReadableCopyright</key>
              <string>Copyright © 2025 snakem982</string>
            </dict>
          </plist>
          EOF



      - name: Install ImageMagick
        run: brew install imagemagick

      - name: Convert PNG to ICNS
        run: |
          # 创建 iconset 文件夹
          mkdir appicon.iconset
          
          # 给原始图标添加透明内边距，居中缩放到安全区域（大约 392x392）
          magick script/appicon.png -resize 392x392 -gravity center -background none -extent 512x512 script/appicon-padded.png
          
          # 生成各尺寸 PNG 图标（来自 padded 图标）
          magick script/appicon-padded.png -resize 16x16    appicon.iconset/icon_16x16.png
          magick script/appicon-padded.png -resize 32x32    appicon.iconset/icon_16x16@2x.png
          magick script/appicon-padded.png -resize 32x32    appicon.iconset/icon_32x32.png
          magick script/appicon-padded.png -resize 64x64    appicon.iconset/icon_32x32@2x.png
          magick script/appicon-padded.png -resize 128x128  appicon.iconset/icon_128x128.png
          magick script/appicon-padded.png -resize 256x256  appicon.iconset/icon_128x128@2x.png
          magick script/appicon-padded.png -resize 256x256  appicon.iconset/icon_256x256.png
          magick script/appicon-padded.png -resize 512x512  appicon.iconset/icon_256x256@2x.png
          magick script/appicon-padded.png -resize 512x512  appicon.iconset/icon_512x512.png
          magick script/appicon-padded.png -resize 1024x1024 appicon.iconset/icon_512x512@2x.png
          
          # 生成 .icns 文件
          iconutil -c icns -o appicon.icns appicon.iconset
          
          # 清理临时文件
          rm -r appicon.iconset
          rm script/appicon-padded.png
          
          # 移动 .icns 到 App Bundle 资源目录
          mv appicon.icns Pandora-Box.app/Contents/Resources/


      - name: Archive App Folder
        run: zip -r Pandora-Box-${{ matrix.arch }}.app.zip Pandora-Box.app

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG with Drag-to-Applications
        run: |
          # 创建临时目录并拷贝 .app 进去
          mkdir dmg-source
          cp -R Pandora-Box.app dmg-source/
          
          # 使用 create-dmg 创建带 Applications 拖动功能的 DMG
          create-dmg \
            --volname "Pandora-Box-${{ matrix.arch }}" \
            --window-size 500 300 \
            --icon-size 100 \
            --icon "Pandora-Box.app" 100 100 \
            --app-drop-link 375 100 \
            Pandora-Box-${{ matrix.arch }}.dmg \
            dmg-source
          
          # 清理临时目录
          rm -rf dmg-source


      - name: Upload Artifacts (.app and .dmg)
        uses: actions/upload-artifact@v4
        with:
          name: Pandora-Box-${{ matrix.arch }}
          path: |
            Pandora-Box-${{ matrix.arch }}.dmg
            Pandora-Box-${{ matrix.arch }}.app.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1-alpha
          name: v1.0.1-alpha
          draft: false
          prerelease: true
          files: |
            Pandora-Box-${{ matrix.arch }}.dmg
            Pandora-Box-${{ matrix.arch }}.app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

