name: Build Windows App

on:
  push:
    branches:
      - v3-alpha
    tags:
      - 'v*'

jobs:
  build:
    permissions: write-all
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ amd64,arm64 ]  # 如果 arm64 构建有可用的 mingw 工具链，否则可只使用 amd64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      # 安装 Scoop 和 MinGW
      - name: Install Scoop and MinGW
        shell: pwsh
        run: |
          # 设置执行策略
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

          # 如果 Scoop 未安装，则安装 Scoop
          if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
            iwr -useb get.scoop.sh | iex
          }

          # 添加主 bucket（如果还没添加的话）
          scoop bucket add main

          # 安装 mingw（注意：这里默认安装的 mingw-w64 工具链一般适用于 amd64，
          # 如果需要 arm64 版本，请确认 Scoop 中是否有相应包，或者调整包名称）
          scoop install mingw

          Write-Host "Scoop and MinGW installed successfully."

      # 设置 MinGW 编译环境（根据不同架构调整编译器和环境变量）
      - name: Setup MinGW Environment
        shell: pwsh
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          if ($env:GOARCH -eq "amd64") {
            # 假设 Scoop 安装的 mingw 默认路径为：
            $mingwPath = "$env:USERPROFILE\scoop\apps\mingw\current\bin"
            $env:PATH = "$mingwPath;$env:PATH"
            # 这里直接使用 gcc/g++，因为 mingw 安装后一般将交叉编译工具放入 PATH 中
            $env:CC = "x86_64-w64-mingw32-gcc"
            $env:CXX = "x86_64-w64-mingw32-g++"
          } elseif ($env:GOARCH -eq "arm64") {
            # 如需构建 arm64，请确认是否从 Scoop 安装了 arm64 版本的 mingw，
            # 或者使用其它安装方式，这里做示例处理，路径可能需要调整
            $mingwPath = "$env:USERPROFILE\scoop\apps\mingw\current\bin"
            $env:PATH = "$mingwPath;$env:PATH"
            $env:CC = "aarch64-w64-mingw32-gcc"
            $env:CXX = "aarch64-w64-mingw32-g++"
          }
          # 设置 Go 的交叉编译环境变量
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          Write-Host "MinGW environment setup complete for $($env:GOARCH)"

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Dependencies
        shell: pwsh
        run: |
          cd backend
          go mod tidy

      - name: Build Go Backend for ${{ matrix.arch }}
        shell: pwsh
        run: |
          cd backend
          go build -tags=with_gvisor -trimpath `
            -ldflags "-s -w -H=windowsgui" `
            -o "Pandora-Box.exe" main.go
          
          if ($?) {
            Write-Host "Build completed successfully."
          } else {
            Write-Error "Go build failed."
            exit 1
          }

      - name: Install ImageMagick
        shell: pwsh
        run: choco install imagemagick -y

      - name: Convert PNG to ICO
        shell: pwsh
        run: magick convert script/appicon.png -resize 256x256 appicon.ico

      - name: Install rcedit
        shell: pwsh
        run: choco install rcedit -y

      - name: Embed Icon with rcedit
        shell: pwsh
        run: |
          # 对 Go 编译生成的 exe 文件嵌入 ICO 图标
          rcedit.exe backend\Pandora-Box.exe --set-icon appicon.ico

      - name: Install Windows SDK
        shell: pwsh
        run: |
          choco install windows-sdk-11-version-22h2-all -y


      - name: Embed Manifest with mt.exe
        shell: pwsh
        run: |
          mt.exe -manifest script\Pandora-Box.exe.manifest -outputresource:backend\Pandora-Box.exe;1

      - name: Compress Executable
        shell: pwsh
        run: |
          if (Test-Path "backend\Pandora-Box.exe") {
            Compress-Archive -Path backend\Pandora-Box.exe -DestinationPath "windows-${{ matrix.arch }}.zip"
            Write-Host "Executable compressed successfully."
          } else {
            Write-Error "Executable file not found for compression."
            exit 1
          }

      - name: Upload Artifacts (Compressed Executable)
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}.zip
          path: windows-${{ matrix.arch }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1-alpha
          name: v1.0.1-alpha
          draft: false
          prerelease: true
          files: |
            windows-${{ matrix.arch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
