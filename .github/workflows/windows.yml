name: Build Go Project with MinGW

on:
  push:
    branches:
      - v3-alpha
    tags:
      - 'v*'

jobs:
  build:
    permissions: write-all
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]  # 支持不同架构的编译

    steps:
      # 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 安装 MinGW-w64 编译工具（支持 amd64 和 arm64）
      - name: Install MinGW-w64
        run: |
          # 下载 MinGW-w64 安装包
          $installerPath = "$env:USERPROFILE\mingw_installer.exe"
          Invoke-WebRequest -Uri https://sourceforge.net/projects/mingw-w64/files/latest/download -OutFile $installerPath

          # 检查安装文件并执行
          if (Test-Path $installerPath) {
            Write-Host "MinGW Installer downloaded successfully."
            Start-Process -FilePath $installerPath -ArgumentList "/SILENT" -NoNewWindow -Wait
          } else {
            Write-Error "MinGW Installer download failed."
            exit 1
          }

      # 设置 MinGW 编译环境
      - name: Setup MinGW Environment
        shell: pwsh
        run: |
          if ($env:GOARCH -eq "amd64") {
            # 设置为 MinGW-w64 的 GCC 编译器（用于 amd64）
            $env:CC = "x86_64-w64-mingw32-gcc"
            $env:CXX = "x86_64-w64-mingw32-g++"
          } elseif ($env:GOARCH -eq "arm64") {
            # 设置为 MinGW-w64 的 ARM64 GCC 编译器（用于 arm64）
            $env:CC = "aarch64-w64-mingw32-gcc"
            $env:CXX = "aarch64-w64-mingw32-g++"
          }
          
          # 设置 Go 构建环境
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          echo "MinGW environment setup complete for $($env:GOARCH)"

      # 设置 Go 环境
      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'  # 设置 Go 版本

      # 安装 Go 项目依赖
      - name: Install Dependencies
        run: |
          cd backend
          go mod tidy

      # 使用 MinGW 编译 Go 项目
      - name: Build Go Backend for ${{ matrix.arch }}
        shell: pwsh
        run: |
          cd backend
          go build -tags=with_gvisor -trimpath `
            -ldflags "-s -w -H=windowsgui" `
            -o "Pandora-Box-${{ matrix.arch }}.exe" main.go
          
          if ($?) {
            Write-Host "Build completed successfully."
          } else {
            Write-Error "Go build failed."
            exit 1
          }

      # 将生成的可执行文件进行压缩
      - name: Compress Executable
        shell: pwsh
        run: |
          if (Test-Path "backend\Pandora-Box-${{ matrix.arch }}.exe") {
            Compress-Archive -Path backend\Pandora-Box-${{ matrix.arch }}.exe -DestinationPath "Pandora-Box-${{ matrix.arch }}.zip"
            Write-Host "Executable compressed successfully."
          } else {
            Write-Error "Executable file not found for compression."
            exit 1
          }

      # 上传构建产物
      - name: Upload Artifacts (Compressed Executable)
        uses: actions/upload-artifact@v4
        with:
          name: Pandora-Box-${{ matrix.arch }}.exe.zip
          path: Pandora-Box-${{ matrix.arch }}.zip

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1-alpha
          name: v1.0.1-alpha
          draft: false
          prerelease: true
          files: |
            Pandora-Box-${{ matrix.arch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
