name: Build Go Project with MSVC

on:
  push:
    branches:
      - v3-alpha
    tags:
      - 'v*'

jobs:
  build:
    permissions: write-all
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]  # 支持不同架构的编译

    steps:
      # 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 安装 Visual Studio Build Tools 和必要组件
      - name: Install Visual Studio Build Tools
        run: |
          # 下载 Visual Studio Installer
          $installerPath = "$env:USERPROFILE\vs_installer.exe"
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_installer.exe -OutFile $installerPath
          
          # 确保文件存在并执行安装
          if (Test-Path $installerPath) {
            Write-Host "VS Installer downloaded successfully."
            Start-Process -FilePath $installerPath -ArgumentList '--quiet', '--wait', '--norestart', '--includeRecommended' -NoNewWindow -Wait
          } else {
            Write-Error "VS Installer download failed."
            exit 1
          }

      # 初始化 MSVC 环境
      - name: Setup MSVC Environment
        shell: pwsh
        run: |
          # 执行 MSVC 环境初始化脚本，确保 cl.exe 可以在环境中找到
          if (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat") {
            & "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat"
            echo "MSVC environment setup complete"
          } else {
            Write-Error "Failed to find VsDevCmd.bat, MSVC environment setup failed."
            exit 1
          }

      # 设置 Go 环境
      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'  # 设置 Go 版本

      # 安装依赖
      - name: Install Dependencies
        run: |
          cd backend
          go mod tidy

      # 使用 MSVC 编译 Go 项目
      - name: Build Go Backend for ${{ matrix.arch }}
        shell: pwsh
        run: |
          cd backend
          $env:GOARCH = "${{ matrix.arch }}"
          $env:GOOS = "windows"
          $env:CGO_ENABLED = "1"
          $env:CC = "cl"  # 设置使用 MSVC 编译器 cl.exe
          $env:CXX = "cl" # 设置 C++ 编译器为 cl.exe
          
          # 输出环境变量调试信息，确保正确设置
          echo "GOARCH: $env:GOARCH"
          echo "GOOS: $env:GOOS"
          echo "CGO_ENABLED: $env:CGO_ENABLED"
          
          # 编译项目
          go build -tags=with_gvisor -trimpath `
            -ldflags "-s -w -H=windowsgui" `
            -o "Pandora-Box-${{ matrix.arch }}.exe" main.go
          
          if ($?) {
            Write-Host "Build completed successfully."
          } else {
            Write-Error "Go build failed."
            exit 1
          }

      # 将生成的可执行文件进行压缩
      - name: Compress Executable
        shell: pwsh
        run: |
          if (Test-Path "backend\Pandora-Box-${{ matrix.arch }}.exe") {
            Compress-Archive -Path backend\Pandora-Box-${{ matrix.arch }}.exe -DestinationPath "Pandora-Box-${{ matrix.arch }}.zip"
            Write-Host "Executable compressed successfully."
          } else {
            Write-Error "Executable file not found for compression."
            exit 1
          }

      # 上传构建产物
      - name: Upload Artifacts (Compressed Executable)
        uses: actions/upload-artifact@v4
        with:
          name: Pandora-Box-${{ matrix.arch }}.exe.zip
          path: Pandora-Box-${{ matrix.arch }}.zip

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1-alpha
          name: v1.0.1-alpha
          draft: false
          prerelease: true
          files: |
            Pandora-Box-${{ matrix.arch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
