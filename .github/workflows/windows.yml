name: Build Windows App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions: write-all
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install Frontend Dependencies
        run: npm install

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Backend Dependencies
        shell: pwsh
        run: |
          cd src-go
          go mod tidy

      - name: Download Geo Files
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.metadb -OutFile src-go/internal/em/geoip.metadb
          Invoke-WebRequest -Uri https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat -OutFile src-go/internal/em/GeoSite.dat
          Invoke-WebRequest -Uri https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb -OutFile src-go/internal/em/GeoLite2-ASN.mmdb

      - name: Get Tag Version
        shell: bash
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Backend for ${{ matrix.arch }}
        shell: pwsh
        env:
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ env.VERSION }}
        run: |
          cd src-go
          go build -tags=with_gvisor -trimpath `
            -ldflags "-s -w -X github.com/snakem982/pandora-box/api.Version=$env:VERSION" `
            -o px.exe

      - name: Sync VERSION to package.json
        run: node build/sync-version.js

      - name: Build Frontend for ${{ matrix.arch }}
        shell: pwsh
        run: |
          $arch = "${{ matrix.arch }}"
          if ($arch -eq "amd64") {
            $arch = "x64"
          }
          npx electron-forge make --arch=$arch

      - name: Compress Executables
        shell: pwsh
        run: |
          $arch = "${{ matrix.arch }}"
          if ($arch -eq "amd64") {
            $arch = "x64"
          }
          Compress-Archive -Path out\Pandora-Box*\* -DestinationPath "windows-${{ matrix.arch }}-app.zip"
          Compress-Archive -Path out\make\wix\$arch\* -DestinationPath "windows-${{ matrix.arch }}-msi.zip"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: false
          prerelease: true
          files: |
            windows-${{ matrix.arch }}-app.zip
            windows-${{ matrix.arch }}-msi.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
